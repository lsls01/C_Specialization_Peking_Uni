3 library
ifstream read
ofstream write
fstream read & write

hierarchy of the three library
ios: istream, ostream
istream: ifstream, iostream
ostream: iostream, ofstream
iostream: fstream





create sequential file

#include <fstream>
ofstream outFile("clients.dat", ios::out|ios::binary);
ios::out out to a file and delete the original content
ios::app out to a file and remain the content, append at the end
ios::binary open as a binary file

ofstream fout;
fout.open("test.out", ios::out|ios::binary);
if(!out) { cerr << "File open error!" << endl;
long location = fout.tellp();       //取得写指针的位置
long location 1 = fin.tellg();      //get read pointer
location = 10L;
fout.seekp(location);               //move write pointer to 10th byte
fout.seekp(location, ios::beg);     //从头数location
fout.seekp(location, ios::cur);     //从当前位置
fout.seekp(location, ios::end);     //count from tail



#include <iostream>
#include <fstream>
#include <csting>
using namespace std;

class CStudent
{
    public:
        char szName[20];
        int nScore;
}
int main()
{
    CStudent s;
    ofstream outFile("c:\\tmp\\students.dat", ios::out|ios::binary);
    while(cin >> s.szName >> s.nScore)
    {
        if(strcasecmp(s.szName, "exit") == 0)
            break;
        outFile.write((char *) &s, sizeof(s));
    }
    outFile.close();
    return 0;
}



在Windows下，文本文件是以"\r\n"作为换行符
读出时，系统会将0x0d0a只读入0x0a
写入时，对于0x0a系统会自动写入0x0d



int main()
{
    CStudent s;
    ifstream inFile("students.dat", ios::in|ios::binary);
    if(!inFile)
    {
        cout << "error" << endl;
        return 0;
    }
    while(inFile.read((char*) &s, sizeof(s))
    {
        int nReadedByte = inFile.gcount();
        cout << s.szName << " " << s.score << endl;
    }
    inFile.close();
    return 0;
}



int main()
{
    CStudent s;
    fstream iofile("c:\\tmp\\students.dat", ios::in|ios::out|ios::binary);
    if(!iofile)
    {
        cout << "error";
        return 0;
    }
    iofile.seekp(2 * sizeof(s), ios::beg);
    iofile.write("Mike", strlen("Mike") + 1);
    iofile.seekg(0, ios::beg);      //locate at the begining
    while(iofile.read((char*) &s, sizeof(s)))
        cout << s.szName << " " << s.nScore << endl;
    iofile.close();
    return 0;
}



Close file explicitly
ifstream fin("test.dat", ios::in);
fin.close();
ofstream fout("test.dat", ios::out);
fout.close();



#include <iostream>
#include <fstream>
using namespace std;

int main(int argc, char *argv[])
{
    if(argc != 3)
    {
        cout << "File name missing!" << endl;
        return 0;
    }
    ifstream inFile(argv[1], ios::binary|ios::in);
    if(!inFile)
    {
        cout << "Source file open error." << endl;
        return 0;
    }
    ofstream outFile(argv[2], ios::binary|ios::out);
    if(!outFile)
    {
        cout << "New file open error." << endl;
        inFile.close();
        return 0;
    }
    char c;
    while(inFile.get(c))
        outFile.put(c);
    outFile.close();
    inFile.close();
    return 0;
}



template <class 类型参数1， class 类型参数2>
返回值类型 模板名（形参表）
{
    函数体
}
函数模板可以重载



template<class T1, class T2>
T2 print(T1 arg1, T2 arg2)
{
    cout << arg1 << " " << arg2 << endl;
    return arg2;
}



template<class T>
T maxElement(T a[], int size)
{
    T tmpMax = a[0];
    for(int i = 1; i < size; i++)
        if(tmpMax < a[j])
    tmpMax = a[j];
    return tmpMax;
}



类模板的定义
template <类型参数表>
class 类模板名
{
    成员函数和成员变量
};


template <class T1, class T2>
class Pair
{
    public:
        T1 key;
        T2 value;
        Pair(T1 k, T2 v): key(k), value(v){};
        bool operator < (const Pair<T1, T2> &p) const
        {
            return key < p.key;
        }
}


int main()
{
    Pair <string, int> student("Tom", 19);
    cout << student.key << " " << student.value;
    return 0;
}



#include <iostream>
using namespace std;
template <class T>
class A
{
    public:
        template <class T2>
        void Func(T2 t)
        {
            cout << t;
        }
}
int main()
{
    A<int> a;
    a.Func('K');
    return 0;
}



(1)类模板从类模板派生
template <class T1, class T2>
class A
{
    T1 v1;
    T2 v2;
};
template <class T1, class T2>
class B: public A<T2, T1>
{
    T1 v3;
    T2 v4;
};
template <class T>
class C: public B<T, T>
{
    T v5;
};
int main()
{
    B<int, double> obj1;
    C<int> obj2;
    return 0;
}
(2)类模板从模板类派生
template <class T1, class T2>
class A
{
    T1 v1;
    T2 v2;
};
template <class T>
class B: public A<int, double>
{
    T v;
};
int main()
{
    B<char> obj1;
    return 0;
}
(3)类模板从普通类派生
class A
{
    int v1;
};
template <class T>
class B: public A
{
    T v;
};
int main()
{
    B<char> obj1;
    return 0;
}
(4)普通类从模板类派生
template <class T>
class A
{
    T v1;
    int n;
};
class B: public A<int>
{
    double v;
}
int main()
{
    B obj1;
    return 0;
}



string对象的初始化
string s1(8, 'x');
s.length();
string s1("cat")
s2 = s1             //s2's content is "cat"
s3.assign(s1);
s3.assign(s1, 1, 3);        //begin from 1, length is 3.
s1 += s2
s1.append(s2, 3, s1.size());   



Finding in string
find
rfind
find_first_of
find_last_of
find_first_not_of
find_last_not_of
4294967295 not find



erase in string
s1.erase(5);        //erase from 5.
s1.length()
s1,size()
s1.replace(1,2,"haha",1,3);
s1.insert(5, s2);
s1.insert(5, s2, 5, 3);

s1.c_str()          //return a traditional const char *, end with '\0'

string类at成员函数要检查下标范围，[]不作此检查



freopen("test.txt", "w", stdout);       // redirect standard out to test.txt
if(y == 0)
    cerr << "error." << endl;
else
    cout << x/y;

freopen("t.txt", "r", stdin);           // redirect standard in from t.txt
cin >> f >> n;
while(cin>>x)
{
}
Ctrl + Z means cin stop when using keyboard.



istream类的成员函数
istream &getline(char *buf, int bufSize)
从输入流中读取bufSize - 1个字符到缓冲区buf，或读到碰到'\n'为止
istream &getline(char *buf, int bufSize, char delim)
读到bufSize -1或者碰到delim个字符为止
两个函数都会自动在buf中读入数据的结尾添加\0    '\n'或delim都不会被读入buf，但会被从输入流中取走。但若读取超出bufSize，则读取出错
可以用if(!cin.getline())判断输入是否结束
bool eof(); 判断输入流是否结束
int peek(); 返回下一个字符，但不从流中去掉
istream &putback(char c); 将字符ch放回输入流
istream &ignore(int nCount = 1, int delim = EOF); 从流中删掉最多nCount个字符，遇到EOF时结束。



#include <iostream>
using namespace std;

int main()
{
    int x;
    char buf[100];
    cin >> x;
    cin.getline(buf, 90);
    cout << buf << endl;
    return 0;
}
输入：12 abcd<enter>
输出： abcd
输入：12<enter>
输出：12
